name: DigitalOcean Container Registry

# Configures this workflow to run every time a change is pushed to the branch called `latest`.
on:
  workflow_dispatch:
    inputs:
      registry:
        description: 'DigitalOcean registry name'
        required: true
      image:
        description: 'Docker image name'
        required: true
        default: 'tacs_compra_conjunta'
      token:
        description: 'DigitalOcean access token'
        required: true

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Uses the `digitalocean/action-doctl` action to log in to the Container registry using the account and
      # token that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ github.event.inputs.token }}
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and
      # labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be
      # referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: registry.digitalocean.com/${{ github.event.inputs.registry }}/${{ github.event.inputs.image }}
          tags: backend
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's
      # `Dockerfile`. If the build succeeds, it pushes the image to DigitalOcean Container Registry.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path.
      # For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the
      # `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # https://docs.docker.com/build/cache/backends/gha/#using-dockerbuild-push-action
          cache-from: type=gha
          cache-to: type=gha,mode=max
